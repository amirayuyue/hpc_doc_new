"use strict";(self.webpackChunkhpc_doc_new=self.webpackChunkhpc_doc_new||[]).push([[1107],{8220:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>r});var o=i(4848),s=i(8453);const t={title:"Building and Compiling GPU based Softwares and Applications",sidebar_position:1},l=void 0,a={id:"running-jobs/build_gpu_apps",title:"Building and Compiling GPU based Softwares and Applications",description:"Many applications require to be built with GPU support, such as Kokkos, LAMMPS, deep learning frameworks, etc. This page will showcase how to install and build GPU-supported softwares/applications.",source:"@site/docs/running-jobs/build_gpu_apps.md",sourceDirName:"running-jobs",slug:"/running-jobs/build_gpu_apps",permalink:"/hpc_doc_new/docs/running-jobs/build_gpu_apps",draft:!1,unlisted:!1,editUrl:"https://github.com/amirayuyue/hpc_doc_new/docs/running-jobs/build_gpu_apps.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Building and Compiling GPU based Softwares and Applications",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Running Jobs",permalink:"/hpc_doc_new/docs/category/running-jobs"},next:{title:"Conda Enviroments",permalink:"/hpc_doc_new/docs/running-jobs/conda"}},d={},r=[{value:"Allocating and Placement on a GPU Node",id:"allocating-and-placement-on-a-gpu-node",level:2},{value:"Checking GPU is Active",id:"checking-gpu-is-active",level:2},{value:"Installing software/application",id:"installing-softwareapplication",level:2},{value:"Now to complete the building and installation of <code>Kokkos</code>:",id:"now-to-complete-the-building-and-installation-of-kokkos",level:3}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Many applications require to be built with GPU support, such as Kokkos, LAMMPS, deep learning frameworks, etc. This page will showcase how to install and build GPU-supported softwares/applications."}),"\n",(0,o.jsx)(n.p,{children:"The showcase will utilize the application, Kokkos, as our example application."}),"\n",(0,o.jsx)(n.h2,{id:"allocating-and-placement-on-a-gpu-node",children:"Allocating and Placement on a GPU Node"}),"\n",(0,o.jsx)(n.p,{children:"The first step will be allocating a GPU node to be able to copile with GPU(CUDA) support."}),"\n",(0,o.jsxs)(n.p,{children:["GPU nodes can be allocated via test partition (1 Hour Max TimeLimit) or via the ",(0,o.jsx)(n.code,{children:"gpu"})," partition."]}),"\n",(0,o.jsxs)(n.p,{children:["For shorter build times, ",(0,o.jsx)(n.code,{children:"test"})," partition is a good starting point, however for longer GPU utilization allocate a node via ",(0,o.jsx)(n.code,{children:"gpu"})," Queue."]}),"\n",(0,o.jsxs)(n.p,{children:["To allocate a gpu node to be used interactively use the following line, ",(0,o.jsx)(n.code,{children:"salloc --partition=<queue> --nodes=<#> --gres=gpu:X --time=<time>"})," where X will be replaced by 1 or 2 to denote how many GPU cards to use."]}),"\n",(0,o.jsxs)(n.p,{children:["More information can be found ",(0,o.jsx)(n.a,{href:"https://ucm-it.github.io/hpc_docs/#/running_jobs",children:"here"})," or for interactive jobs click ",(0,o.jsx)(n.a,{href:"https://ucm-it.github.io/hpc_docs/#/interact_job",children:"here"}),"\n:: Tip\nLogin Nodes Do Not Have GPUs\n::"]}),"\n",(0,o.jsx)(n.p,{children:"Once the job has been submitted and the resources have been allocated -"}),"\n",(0,o.jsxs)(n.p,{children:["Begin to run interactively via: ",(0,o.jsx)(n.code,{children:"srun --jobid=<jobid> --pty /bin/bash"})]}),"\n",(0,o.jsxs)(n.p,{children:["An updated ",(0,o.jsx)(n.code,{children:"user@gnode"})," should be similar to the image below. In the image the user is on the ",(0,o.jsx)(n.code,{children:"gnode009"}),"\n",(0,o.jsx)(n.img,{alt:"Image of User of gnode",src:i(8111).A+"",title:"User placed on gnode009",width:"1906",height:"64"})]}),"\n",(0,o.jsx)(n.h2,{id:"checking-gpu-is-active",children:"Checking GPU is Active"}),"\n",(0,o.jsxs)(n.p,{children:["Once placed on the GPU node, check the GPU resources on the node you are placed using ",(0,o.jsx)(n.code,{children:"nvidia-smi"}),". If the GPU is properly activated a similar message will appear as below."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsxs)("summary",{children:[(0,o.jsx)(n.code,{children:"nvidia-smi"})," Output"]}),"\nHere is an example output of what ",(0,o.jsx)(n.code,{children:"nvidia-smi"})," should output when running the command on a GPU Node"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  NVIDIA A100-PCIE-40GB          Off |   00000000:17:00.0 Off |                    0 |\n| N/A   29C    P0             35W /  250W |       0MiB /  40960MiB |      0%      Default |\n|                                         |                        |             Disabled |\n+-----------------------------------------+------------------------+----------------------+\n|   1  NVIDIA A100-PCIE-40GB          Off |   00000000:31:00.0 Off |                    0 |\n| N/A   29C    P0             37W /  250W |       0MiB /  40960MiB |      4%      Default |\n|                                         |                        |             Disabled |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                    \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|  No running processes found                                                             |\n+-----------------------------------------------------------------------------------------+\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:[":: Warning\nIf a message stating that ",(0,o.jsx)(n.code,{children:"nvidia-smi"})," command is not returning a similar message as above, open a ticket ",(0,o.jsx)(n.a,{href:"https://ucmerced.service-now.com/servicehub?id=public_kb_article&sys_id=3c3ee9ff1b67a0543a003112cd4bcb13&form_id=06da3f8edbfc08103c4d56f3ce9619f4",children:"here"})," and state the name of the GPU Node you are working on.\n::"]}),"\n",(0,o.jsx)(n.h2,{id:"installing-softwareapplication",children:"Installing software/application"}),"\n",(0,o.jsx)(n.p,{children:"Ensure the software has been cloned if it is from GitHub or downloaded from the original source."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.em,{children:(0,o.jsxs)(n.strong,{children:["If the Software requires ",(0,o.jsx)(n.code,{children:"CUDA"}),", then ",(0,o.jsx)(n.code,{children:"module load cuda"})]})})}),"\n",(0,o.jsxs)(n.p,{children:["For the following demonstration of how to install a GPU-Supported application we will use ",(0,o.jsx)(n.code,{children:"Kokkos"}),". The source can be found ",(0,o.jsx)(n.a,{href:"https://github.com/kokkos/kokkos",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Kokkos"})," makes use of the ",(0,o.jsx)(n.code,{children:"cmake"})," system for building of the software."]}),"\n",(0,o.jsxs)(n.h3,{id:"now-to-complete-the-building-and-installation-of-kokkos",children:["Now to complete the building and installation of ",(0,o.jsx)(n.code,{children:"Kokkos"}),":"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Clone the repository to the desired location via: ",(0,o.jsx)(n.code,{children:"git clone https://github.com/kokkos/kokkos"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["This software requires CUDA support so now we load CUDA via: ",(0,o.jsx)(n.code,{children:"module load CUDA"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Request an interactive job:  ",(0,o.jsx)(n.code,{children:"salloc --partition=test --nodes=1 --gres=gpu:2 --time=00:30:00"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Begin interactive session: ",(0,o.jsx)(n.code,{children:"srun --jobid=<JOBID> --pty /bin/bash"})," . Replace ",(0,o.jsx)(n.code,{children:"<JOBID>"})," with the unique JobID during your session."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Now ensure placement on a gnode with GPU resources active via the method outlined above."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Now cd into Kokkos: ",(0,o.jsx)(n.code,{children:"cd kokkos"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Now we begin to use the cmake system to build the Kokkos software     ",(0,o.jsx)(n.code,{children:"cmake -B kokkos_build/ -DKokkos_ENABLE_CUDA=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=.local/ -S $PWD"}),". Here ",(0,o.jsx)(n.code,{children:"kokkos_build"})," is our build directory that will be created during the execution of this line. The install prefix is a directory where the user wishes to have the software header files installed."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:":: Tip\nIn following the line above, ensure to change the build location and install prefix to use your building and install location.\n::"}),"\n",(0,o.jsxs)(n.ol,{start:"8",children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Now we execute the cmake build line to build the header files:   ",(0,o.jsx)(n.code,{children:"cmake --build kokkos_build/"})]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Finally execute the install line to have these header files be installed into the ",(0,o.jsx)(n.code,{children:"kokkos_build"})," and to be available in our install location (Example -  ",(0,o.jsx)(n.code,{children:"~/.local/"})," ) folder via:   ",(0,o.jsx)(n.code,{children:"cmake --install kokkos_build/"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["If the build and installation were successful, ",(0,o.jsx)(n.code,{children:"Kokkos"})," header files should be found in the installation location denoted in step one."]}),"\n",(0,o.jsxs)(n.p,{children:["To find the Kokkos build and installation options and further guidance refer to the Kokkos Documentation ",(0,o.jsx)(n.a,{href:"https://kokkos.org/kokkos-core-wiki/quick_start.html",children:"here"}),". The Kokkos build and installation steps used above can also be found in the ",(0,o.jsx)(n.code,{children:"Quick Start"})," section of the Kokkos documentation."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8111:(e,n,i)=>{i.d(n,{A:()=>o});const o=i.p+"assets/images/gnode009 copy-e2b5056d0b38eaf96e4cbec25e2767f5.png"},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var o=i(6540);const s={},t=o.createContext(s);function l(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);